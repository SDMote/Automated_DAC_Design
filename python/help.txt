The design_dac function accepts user input specifications as a dictionary with the following key names:

input_specs = {'resolution':RESOLUTION, 'topology':TOPOLOGY, 'max_nl':MAX_NL, 'max_time':MAX_TIME, 'c_load':C_LOAD, 'poly_w':POLY_W, 'options':options}

where the first 6 elements corresponds to topology-independent specifications and 'options' corresponds to topology-dependent specifications.

- 'resolution':RESOLUTION	Number of bits of resolution (2-16 bits)
- 'topology':TOPOLOGY		Type of DAC circuit, 0: R2R-ladder DAC
- 'max_nl':MAX_NL		Target maximum nonlinearity (LSB), for both Integral Non-Linearity (INL) and Differential Non-Linearity (DNL)
- 'max_time':MAX_TIME		Target maximum transition time (microseconds) for the load specified in C_LOAD
- 'c_load':C_LOAD		Capacitive load (picofarad) considered for the speed of the DAC.
- 'poly_w':POLY_W		Width of the inverter input (currently not leveraged by the flow, set over PDK minimum)


The content of the options dictionary is as follows:
- R2R-ladder:	options = {'ideal_width':IDEAL_WIDTH, 'res_number':RES_NUMBER} 
	- 'ideal_width':IDEAL_WIDTH	1 to use ideal ratio for PMOS and NMOS on-resistances, or 0 to use equall on-resistances for both devices
	- 'res_number':RES_NUMBER	Number of series devices that make the unit resistor (currently supported: 2)

Alternatively, the dictionary can be created by defining constants in specs.py and using the function load_specs(). 
In Google Colab, after editing specs.py it is necessary to reset the sesi√≥n and execute again the cells that set environment variables.